# -*- coding: utf-8 -*-
"""ポートフォリオ

Automatically generated by Colaboratory.

from google.colab import drive
drive.mount('/content/drive')
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
import seaborn
from sklearn.linear_model import LinearRegression

url = "https://raw.githubusercontent.com/yuzhiyo/dog_weight_management/master/dog_data.csv"
# CSV ファイルをデータフレームに読み込む
df = pd.read_csv(url)

q1 = df.前日との体重差.quantile(0.9) #体重差の90%の分位数
q2 = df.前日との体重差.quantile(0.1) #体重差の10%の分位数

new_df = df.query('前日との体重差 < @q1 & 前日との体重差 > @q2')

plus_df = new_df[new_df['前日とのカロリー差'] * new_df['前日との体重差'] > 0] #体重の変化と散歩距離や食事量に相関関係がないデータを削除

x_df = plus_df['前日との体重差']
y_df = plus_df['摂取-消費']

X = np.array(x_df).reshape(-1,1)
Y = np.array(y_df).reshape(-1,1)

from sklearn.linear_model import LinearRegression
model_lr = LinearRegression()
model_lr.fit(X,Y)

a = input("現在の体重を記入してください。(kg)")
b = input("普段の散歩の距離を記入してください。(km)")
c = input("普段の食事量を記入してください。(g)")
d = input("食事の100gあたりのカロリーを記入してください(cal)")

e = input("目標体重を記入してください。(kg)")
f = input("何日で目標体重にしますか？(日)")

now_wei = float(a)
now_dis = float(b)
now_food = float(c)
food_cal = float(d)
target_wei = float(e)
target_day = float(f)

now_cal = (now_food/100) * (food_cal)
sanpo = ((1.77*now_dis*(now_wei**(-0.4))) + (1.25*(now_wei**(-0.25)))) * now_wei
sum = now_cal - sanpo #現在のカロリー

r_wei = (target_wei - now_wei) / target_day

x = r_wei * model_lr.coef_ + model_lr.intercept_ #目標カロリー

ans_down = (sum - x) * 0.9 #提案するカロリーの値を90%に
ans_up = (sum - x) * 1.1 #提案するカロリーの値を110%に

food_down = ans_down / (food_cal / 100)
food_up = ans_up / (food_cal / 100)

if x >= sum:
  print("その調子でいきましょう。犬に負担をかけすぎないように気を付けてください。")
elif sum/2 >= x:
  print("犬に負担がかかりすぎます。目標の再設定をしてください。")
else:
  print('毎日約%.1f～%.1fカロリー減らしましょう。%.1fg～%1.fgの食事の減量で達成可能です。'%(ans_down,ans_up,food_down,food_up))
